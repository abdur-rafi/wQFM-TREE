package src.Tree;

import java.util.ArrayList;
import java.util.Iterator;

// import src.PreProcessing.InternalNode;
// import src.PreProcessing.ComponentGraph;
// import src.PreProcessing.Component;
import src.Taxon.RealTaxon;


public class TreeNode  {
    
    public int index;
    public ArrayList<TreeNode> childs;
    public TreeNode parent;

    public RealTaxon taxon;
    
    public int[] realTaxaInSubtree;
    // public Info info;
    
    public double weight;

    // public Component subTreeComponent;
    // public Component parentComponent;

    // public InternalNode internalNode;
    
    // 0 -> Common with parent
    // 1 -> Uniques
    // public Component[] childComponents;
    // public Component commonWithParent, distinctWithParent;
    // public Component parentDistinct;

    public boolean dupplicationNode;


    // how many times the tri-partition generated by this node occurs all gene trees
    // all but one nodes of this tri partition will have non zero frequency 
    public int frequency;

    public TreeNode(){
        index = -1;
        childs = null;
        parent = null;
        taxon = null;
        weight = 0;
        frequency = 0;
        // this.subTreeComponent = null;
    }

    public TreeNode setIndex(int id){
        this.index = id;
        return this;
    }

    public TreeNode setChilds(ArrayList<TreeNode> ch){
        this.childs = ch;
        return this;
    }

    public TreeNode setParent(TreeNode pr){
        this.parent = pr;
        return this;
    }

    public TreeNode setTaxon(RealTaxon tx){
        this.taxon = tx;
        return this;
    }

    // public TreeNode setInfo(Info inf){
    //     this.info = inf;
    //     return this;
    // }

    public TreeNode setWeight(double w){
        this.weight = w;
        return this;
    }



    // public TreeNode(int i, String lb, ArrayList<TreeNode> ch, TreeNode pr){
    //     index = i;
    //     label = lb;
    //     childs = ch;
    //     parent = pr;
    //     weight = 0;
    // }
    


    
    // @Override
    // public PrintableNode getLeft() {
    //     if (childs == null) return null;
    //     return childs.get(0);
    // }
    // @Override
    // public PrintableNode getRight() {
    //     if(childs == null) return null;
    //     return childs.get(1);
    // }
    // @Override
    // public String getText() {
    //     // if(label != null){
    //     //     return label;
    //     // }
    //     return Integer.toString(index);
    // }


    public String toString() {
        StringBuilder buffer = new StringBuilder(50);
        print(buffer, "", "");
        return buffer.toString();
    }

    private void print(StringBuilder buffer, String prefix, String childrenPrefix) {
        buffer.append(prefix);
        // buffer.append(" i : " + index + " l : " + label);

        if(taxon == null){
            // if(parent == null)
            //     buffer.append(index);
            // else{
            //     buffer.append( index);

            //     // buffer.append(" index : " + index + " label : " + label);
            //     // var sc = info.calculator.score();
            //     // buffer.append(" sc : " + sc + " ");

            //     // buffer.append(" da : " + info.realTaxaCountTotal[0] + " db : " + info.realTaxaCountTotal[1]);
            //     // for(int i = 0; i < info.dummyTaxaCountIndividual.length; ++ i){
            //     //     buffer.append(i + " : " + info.dummyTaxaCountIndividual[i] + " ");
            //     // }
            // }
            buffer.append(index);
            // buffer.append(" dup: " + dupplicationNode);
        }
            // buffer.append(index);
            // buffer.append(" ");
        else
                // buffer.append(" a : " + info.reachableDummyTaxaA.size() + " b : " + info.reachableDummyTaxaB.size());
            // buffer.append(index);
            buffer.append("l : " + taxon.label);

        // if(label != null)
        //     buffer.append(label);
        // else
        //     buffer.append(info.pACount + "-" + info.pBCount + "-" + info.abovepACount + "-" + info.abovepBCount);
        buffer.append('\n');
        ArrayList<TreeNode> chld = childs;
        if(chld == null){
            chld = new ArrayList<>();
        }
        for (Iterator<TreeNode> it = chld.iterator(); it.hasNext();) {
            TreeNode next = it.next();
            if (it.hasNext()) {
                next.print(buffer, childrenPrefix + "├── ", childrenPrefix + "│   ");
            } else {
                next.print(buffer, childrenPrefix + "└── ", childrenPrefix + "    ");
            }
        }
    }

    public boolean isLeaf(){
        return childs == null;
    }
    
    public boolean isRoot(){
        return parent == null;
    }
}
